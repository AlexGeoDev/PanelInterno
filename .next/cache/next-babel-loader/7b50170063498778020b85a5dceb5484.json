{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar transactionBusiness =\n/*#__PURE__*/\nfunction () {\n  function transactionBusiness() {\n    _classCallCheck(this, transactionBusiness);\n  }\n\n  _createClass(transactionBusiness, null, [{\n    key: \"fetchUserBySerial\",\n    value: function () {\n      var _fetchUserBySerial = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(serial) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getSegmetBySerial(serial);\n\n              case 2:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  nombre: serial\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fetchUserBySerial(_x) {\n        return _fetchUserBySerial.apply(this, arguments);\n      }\n\n      return fetchUserBySerial;\n    }()\n  }, {\n    key: \"getSegmetBySerial\",\n    value: function () {\n      var _getSegmetBySerial = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(serial) {\n        var url, data, response, json, _json$data, comercialName, email;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = \"http://10.199.35.25:8282/api/v1/fetchuserbyserial \";\n                data = {\n                  serial: serial\n                };\n                _context2.prev = 2;\n                _context2.next = 5;\n                return fetch(url, {\n                  method: \"POST\",\n                  // or 'PUT'\n                  body: _JSON$stringify(data),\n                  // data can be `string` or {object}!\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  }\n                });\n\n              case 5:\n                response = _context2.sent;\n                _context2.next = 8;\n                return response.json();\n\n              case 8:\n                json = _context2.sent;\n                console.log(json);\n                _json$data = json.data, comercialName = _json$data.comercialName, email = _json$data.email;\n                return _context2.abrupt(\"return\", {\n                  comercialName: comercialName,\n                  email: email\n                });\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.log(\"error en peticion login\" + _context2.t0);\n                return _context2.abrupt(\"return\", null);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 14]]);\n      }));\n\n      function getSegmetBySerial(_x2) {\n        return _getSegmetBySerial.apply(this, arguments);\n      }\n\n      return getSegmetBySerial;\n    }()\n  }]);\n\n  return transactionBusiness;\n}();\n\nexport default transactionBusiness;","map":{"version":3,"sources":["D:/DESARROLLO/PANELCAJERO/business/transactionBusiness.js"],"names":["transactionBusiness","serial","getSegmetBySerial","data","nombre","url","fetch","method","body","headers","response","json","console","log","comercialName","email"],"mappings":";;;;;;IAAMA,mB;;;;;;;;;;;;gDAC2BC,M;;;;;;;uBACVC,iBAAiB,CAACD,MAAD,C;;;AAA9BE,gBAAAA,I;iDACC;AAAEC,kBAAAA,MAAM,EAAEH;AAAV,iB;;;;;;;;;;;;;;;;;;;;;iDAGsBA,M;;;;;;;AACvBI,gBAAAA,G,GAAM,oD;AACNF,gBAAAA,I,GAAO;AACXF,kBAAAA,MAAM,EAAEA;AADG,iB;;;uBAIYK,KAAK,CAACD,GAAD,EAAM;AAChCE,kBAAAA,MAAM,EAAE,MADwB;AAChB;AAChBC,kBAAAA,IAAI,EAAE,gBAAeL,IAAf,CAF0B;AAEJ;AAC5BM,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT;AAHuB,iBAAN,C;;;AAAtBC,gBAAAA,Q;;uBAQaA,QAAQ,CAACC,IAAT,E;;;AAAbA,gBAAAA,I;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;6BACiCA,IAAI,CAACR,I,EAA9BW,a,cAAAA,a,EAAeC,K,cAAAA,K;kDAEhB;AACLD,kBAAAA,aAAa,EAAbA,aADK;AAELC,kBAAAA,KAAK,EAALA;AAFK,iB;;;;;AAKPH,gBAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;kDACO,I;;;;;;;;;;;;;;;;;;;;;AAKb,eAAeb,mBAAf","sourcesContent":["class transactionBusiness {\r\n  static async fetchUserBySerial(serial) {\r\n    const data = await getSegmetBySerial(serial);\r\n    return { nombre: serial };\r\n  };\r\n\r\n  static async getSegmetBySerial(serial) {\r\n    const url = \"http://10.199.35.25:8282/api/v1/fetchuserbyserial \";\r\n    const data = {\r\n      serial: serial\r\n    };\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: \"POST\", // or 'PUT'\r\n        body: JSON.stringify(data), // data can be `string` or {object}!\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      });\r\n\r\n      const json = await response.json();\r\n      console.log(json);\r\n      const { comercialName, email } = json.data;\r\n\r\n      return {\r\n        comercialName,\r\n        email,\r\n      };\r\n    } catch (e) {\r\n      console.log(\"error en peticion login\" + e);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default transactionBusiness"]},"metadata":{},"sourceType":"module"}