{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\DESARROLLO\\\\PANELCAJERO\\\\pages\\\\listusers.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport DesktopLayout from \"../components/WebDesktop/DesktopLayout\";\nimport transactionBusiness from '../business/transactionBusiness';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n\nvar ListUsers =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListUsers, _React$Component);\n\n  function ListUsers(props) {\n    var _this;\n\n    _classCallCheck(this, ListUsers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListUsers).call(this, props));\n    _this.state = {\n      list: []\n    };\n    _this.renderEditable = _this.renderEditable.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ListUsers, [{\n    key: \"getdata\",\n    value: function () {\n      var _getdata = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return transactionBusiness.listUsersSegment();\n\n              case 2:\n                data = _context.sent;\n                console.log(data);\n                this.setState({\n                  list: data\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getdata() {\n        return _getdata.apply(this, arguments);\n      }\n\n      return getdata;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getdata();\n    }\n  }, {\n    key: \"renderEditable\",\n    value: function renderEditable(cellInfo) {\n      var _this2 = this;\n\n      console.log(\"contenido editable:\", cellInfo.value); //const update = transactionBusiness.updateSegment(this.state.user.id, this.state.merchantCode)\n\n      return __jsx(\"div\", {\n        style: {\n          backgroundColor: \"#fafafa\"\n        },\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        onBlur: function onBlur(e) {\n          //const list = [...this.state.list];\n          _this2.state.list[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n          console.log(\"valor celda:\", e.target.innerHTML);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var columns = [{\n        Header: 'Id',\n        accessor: 'id' // String-based value accessors!\n\n      }, {\n        Header: 'serialNumber',\n        accessor: 'serialNumber' // String-based value accessors!\n\n      }, {\n        Header: 'comercialName',\n        accessor: 'comercialName' // String-based value accessors!\n\n      }, {\n        Header: 'identification',\n        accessor: 'iidentificationd' // String-based value accessors!\n\n      }, {\n        Header: 'Celular',\n        accessor: 'cellphone' // String-based value accessors!\n\n      }, {\n        Header: 'email',\n        accessor: 'email' // String-based value accessors!\n\n      }, {\n        Header: 'address',\n        accessor: 'address' // String-based value accessors!\n\n      },\n      /* {\r\n        Header: 'userIdSegment',\r\n        accessor: 'userIdSegment' // String-based value accessors!\r\n      }\r\n        ,\r\n      {\r\n        Header: 'deviceIdSegment',\r\n        accessor: 'deviceIdSegment' // String-based value accessors!\r\n      }\r\n        ,\r\n      {\r\n        Header: 'anonymousIdSegment',\r\n        accessor: 'anonymousIdSegment' // String-based value accessors!\r\n      }\r\n        , */\n      {\n        Header: 'merchantCode',\n        accessor: 'merchantCode',\n        // String-based value accessors!\n        Cell: this.renderEditable\n      }, {\n        Header: 'date',\n        accessor: 'date' // String-based value accessors!\n\n      }];\n      return __jsx(DesktopLayout, {\n        titulo: \"Listado de Usuarios para Asignaci\\xF3n\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Lista de usuarios sin asociar\")), __jsx(ReactTable, {\n        data: this.state.list,\n        columns: columns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ListUsers;\n}(React.Component);\n\nexport default ListUsers;","map":{"version":3,"sources":["D:/DESARROLLO/PANELCAJERO/pages/listusers.js"],"names":["DesktopLayout","transactionBusiness","ReactTable","ListUsers","props","state","list","renderEditable","bind","listUsersSegment","data","console","log","setState","getdata","cellInfo","value","backgroundColor","e","index","column","id","target","innerHTML","columns","Header","accessor","Cell","React","Component"],"mappings":"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","sourcesContent":["import DesktopLayout from \"../components/WebDesktop/DesktopLayout\";\r\nimport transactionBusiness from '../business/transactionBusiness';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css'\r\n\r\n\r\nclass ListUsers extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { list: [] };\r\n    this.renderEditable = this.renderEditable.bind(this);\r\n  }\r\n\r\n  async getdata() {\r\n    const data = await transactionBusiness.listUsersSegment();\r\n    console.log(data);\r\n    this.setState({ list: data });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getdata();\r\n  }\r\n\r\n  renderEditable(cellInfo) {\r\n    console.log(\"contenido editable:\", cellInfo.value);\r\n    //const update = transactionBusiness.updateSegment(this.state.user.id, this.state.merchantCode)\r\n    return (\r\n      <div\r\n        style={{ backgroundColor: \"#fafafa\" }}\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        onBlur={e => {\r\n          //const list = [...this.state.list];\r\n          this.state.list[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n          console.log(\"valor celda:\", e.target.innerHTML);\r\n        }}        \r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const columns = [{\r\n      Header: 'Id',\r\n      accessor: 'id' // String-based value accessors!\r\n    },\r\n    {\r\n      Header: 'serialNumber',\r\n      accessor: 'serialNumber' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'comercialName',\r\n      accessor: 'comercialName' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'identification',\r\n      accessor: 'iidentificationd' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'Celular',\r\n      accessor: 'cellphone' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'email',\r\n      accessor: 'email' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'address',\r\n      accessor: 'address' // String-based value accessors!\r\n    }\r\n      ,\r\n    /* {\r\n      Header: 'userIdSegment',\r\n      accessor: 'userIdSegment' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'deviceIdSegment',\r\n      accessor: 'deviceIdSegment' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'anonymousIdSegment',\r\n      accessor: 'anonymousIdSegment' // String-based value accessors!\r\n    }\r\n      , */\r\n    {\r\n      Header: 'merchantCode',\r\n      accessor: 'merchantCode', // String-based value accessors!\r\n      Cell: this.renderEditable\r\n    }\r\n      ,\r\n    {\r\n      Header: 'date',\r\n      accessor: 'date' // String-based value accessors!\r\n    }]\r\n    return (<DesktopLayout titulo=\"Listado de Usuarios para Asignación\">\r\n      <div><span>Lista de usuarios sin asociar</span></div>\r\n      <ReactTable\r\n        data={this.state.list}\r\n        columns={columns}\r\n      />\r\n    </DesktopLayout>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default ListUsers;"]},"metadata":{},"sourceType":"module"}