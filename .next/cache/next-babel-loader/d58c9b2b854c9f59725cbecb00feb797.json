{"ast":null,"code":"//declarandole el listener\nvar listeners = {};\nvar idlistener = 1;\n\nvar subscribe = function subscribe(eventName, handler) {\n  //revisando si no hay listener con el nombre del evento que se le pasa\n  if (!listeners[eventName]) {\n    //inicializando la lista que va a contener los handlers\n    listeners[eventName] = [];\n  } //obteniendo los eventos \n\n\n  var events = listeners[eventName];\n  console.log(\"adding:\", eventName, handler);\n  events.push({\n    id: idlistener++,\n    callback: handler\n  });\n  return idlistener;\n};\n\nvar notify = function notify(eventName, data) {\n  var events = listeners[eventName];\n\n  if (events) {\n    events.forEach(function (handler) {\n      console.log(\"call handler:\", eventName, data);\n      handler(data);\n    });\n  }\n};\n\nvar remove = function remove(eventName, id) {\n  var events = listeners[eventName];\n\n  if (events) {\n    listeners[eventName] = events.filter(function (x) {\n      return id !== x.id;\n    });\n  }\n};\n\nexport { subscribe, notify, remove };","map":{"version":3,"sources":["D:/DESARROLLO/PANELCAJERO/business/state.js"],"names":["listeners","idlistener","subscribe","eventName","handler","events","console","log","push","id","callback","notify","data","forEach","remove","filter","x"],"mappings":"AAAA;AACA,IAAMA,SAAS,GAAG,EAAlB;AACA,IAAIC,UAAU,GAAG,CAAjB;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAWC,OAAX,EAAuB;AAEvC;AACA,MAAI,CAACJ,SAAS,CAACG,SAAD,CAAd,EAA0B;AACxB;AACAH,IAAAA,SAAS,CAACG,SAAD,CAAT,GAAuB,EAAvB;AACD,GANsC,CAOzC;;;AACE,MAAIE,MAAM,GAAGL,SAAS,CAACG,SAAD,CAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,SAAvB,EAAkCC,OAAlC;AACAC,EAAAA,MAAM,CAACG,IAAP,CAAY;AAACC,IAAAA,EAAE,EAAER,UAAU,EAAf;AAAkBS,IAAAA,QAAQ,EAACN;AAA3B,GAAZ;AAEA,SAAOH,UAAP;AACD,CAbD;;AAeA,IAAMU,MAAM,GAAG,SAATA,MAAS,CAACR,SAAD,EAAWS,IAAX,EAAoB;AACjC,MAAIP,MAAM,GAAGL,SAAS,CAACG,SAAD,CAAtB;;AACA,MAAIE,MAAJ,EAAW;AACTA,IAAAA,MAAM,CAACQ,OAAP,CAAe,UAAAT,OAAO,EAAI;AACxBE,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,SAA7B,EAAwCS,IAAxC;AACAR,MAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,KAHD;AAID;AACF,CARD;;AAUA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACX,SAAD,EAAWM,EAAX,EAAkB;AAC/B,MAAIJ,MAAM,GAAGL,SAAS,CAACG,SAAD,CAAtB;;AACA,MAAIE,MAAJ,EAAW;AACTL,IAAAA,SAAS,CAACG,SAAD,CAAT,GAAuBE,MAAM,CAACU,MAAP,CAAc,UAAAC,CAAC;AAAA,aAAIP,EAAE,KAAKO,CAAC,CAACP,EAAb;AAAA,KAAf,CAAvB;AACD;AACF,CALD;;AAOA,SAAQP,SAAR,EAAkBS,MAAlB,EAAyBG,MAAzB","sourcesContent":["//declarandole el listener\r\nconst listeners = {};\r\nlet idlistener = 1;\r\nconst subscribe = (eventName,handler) => {\r\n\r\n  //revisando si no hay listener con el nombre del evento que se le pasa\r\n  if (!listeners[eventName]){\r\n    //inicializando la lista que va a contener los handlers\r\n    listeners[eventName] = [];\r\n  }\r\n//obteniendo los eventos \r\n  let events = listeners[eventName];\r\n  console.log(\"adding:\" ,eventName ,handler);\r\n  events.push({id: idlistener++,callback:handler});\r\n\r\n  return idlistener;\r\n};\r\n\r\nconst notify = (eventName,data) => {\r\n  let events = listeners[eventName];\r\n  if (events){\r\n    events.forEach(handler => {\r\n      console.log(\"call handler:\" ,eventName ,data);\r\n      handler(data);\r\n    });\r\n  }\r\n};\r\n\r\nconst remove = (eventName,id) => {\r\n  let events = listeners[eventName];\r\n  if (events){\r\n    listeners[eventName] = events.filter(x => id !== x.id);\r\n  }\r\n};\r\n\r\nexport {subscribe,notify,remove};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}