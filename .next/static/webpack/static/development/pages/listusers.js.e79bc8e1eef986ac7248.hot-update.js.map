{"version":3,"file":"static/webpack/static\\development\\pages\\listusers.js.e79bc8e1eef986ac7248.hot-update.js","sources":["webpack:///./pages/listusers.js"],"sourcesContent":["import DesktopLayout from \"../components/WebDesktop/DesktopLayout\";\r\nimport transactionBusiness from '../business/transactionBusiness';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css'\r\n\r\n\r\nclass ListUsers extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { list: [] };\r\n    this.renderEditable = this.renderEditable.bind(this);\r\n  }\r\n\r\n  async getdata() {\r\n    const data = await transactionBusiness.listUsersSegment();\r\n    console.log(data);\r\n    this.setState({ list: data });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getdata();\r\n  }\r\n\r\n  renderEditable(cellInfo) {\r\n    console.log(\"contenido editable:\", cellInfo.value);\r\n    //const update = transactionBusiness.updateSegment(this.state.user.id, this.state.merchantCode)\r\n    return (\r\n      <div\r\n        style={{ backgroundColor: \"#fafafa\" }}\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        onBlur={e => {\r\n          const list = [...this.state.list];\r\n          list[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n          this.setState({ list })\r\n          console.log(\"valor celda:\", e.target.innerHTML);\r\n          console.log(\"id celda: \", cellInfo.original.id);\r\n          //const update = transactionBusiness.updateSegment(cellInfo.original.id, e.target.innerHTML)\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const columns = [{\r\n      Header: 'Id',\r\n      accessor: 'id' // String-based value accessors!\r\n    },\r\n    {\r\n      Header: 'serialNumber',\r\n      accessor: 'serialNumber' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'comercialName',\r\n      accessor: 'comercialName' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'identification',\r\n      accessor: 'iidentificationd' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'Celular',\r\n      accessor: 'cellphone' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'email',\r\n      accessor: 'email' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'address',\r\n      accessor: 'address' // String-based value accessors!\r\n    }\r\n      ,\r\n    /* {\r\n      Header: 'userIdSegment',\r\n      accessor: 'userIdSegment' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'deviceIdSegment',\r\n      accessor: 'deviceIdSegment' // String-based value accessors!\r\n    }\r\n      ,\r\n    {\r\n      Header: 'anonymousIdSegment',\r\n      accessor: 'anonymousIdSegment' // String-based value accessors!\r\n    }\r\n      , */\r\n    {\r\n      Header: 'merchantCode',\r\n      accessor: 'merchantCode', // String-based value accessors!\r\n      Cell: this.renderEditable\r\n    }\r\n      ,\r\n    {\r\n      Header: 'date',\r\n      accessor: 'date' // String-based value accessors!\r\n    }]\r\n    return (<DesktopLayout titulo=\"Listado de Usuarios para AsignaciÃ³n\">\r\n      <div><span>Lista de usuarios sin asociar</span></div>\r\n      <ReactTable\r\n        data={this.state.list}\r\n        columns={columns}\r\n      />\r\n    </DesktopLayout>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default ListUsers;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;;;;;;;;;;;AAEA;AACA;;AADA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AAHA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA1GA;AACA;AA6GA;;;;A","sourceRoot":""}